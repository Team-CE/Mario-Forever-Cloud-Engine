[gd_scene load_steps=32 format=2]

[ext_resource path="res://Prefabs/Mario/Small.tres" type="SpriteFrames" id=1]
[ext_resource path="res://Scripts/General/MarioPhysics.gd" type="Script" id=2]
[ext_resource path="res://Prefabs/Mario/FireFlower.tres" type="SpriteFrames" id=3]
[ext_resource path="res://Objects/Enemies/Core/BaseSounds.tscn" type="PackedScene" id=4]
[ext_resource path="res://GFX/Fonts/MFFont.fnt" type="BitmapFont" id=5]
[ext_resource path="res://Prefabs/Mario/Big.tres" type="SpriteFrames" id=6]
[ext_resource path="res://Prefabs/Mario/Beetroot.tres" type="SpriteFrames" id=7]
[ext_resource path="res://Scripts/Powerups/FireFlower.gd" type="Script" id=8]
[ext_resource path="res://Scripts/Powerups/Beetroot.gd" type="Script" id=9]
[ext_resource path="res://Prefabs/Mario/Lui.tres" type="SpriteFrames" id=10]
[ext_resource path="res://Scripts/Powerups/Lui.gd" type="Script" id=11]
[ext_resource path="res://Prefabs/Mario/IceFlower.tres" type="SpriteFrames" id=12]
[ext_resource path="res://Scripts/Powerups/IceFlower.gd" type="Script" id=13]
[ext_resource path="res://Prefabs/Mario/Propeller.tres" type="SpriteFrames" id=14]
[ext_resource path="res://Scripts/Powerups/Propeller.gd" type="Script" id=15]

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;

uniform bool mixing = false;

const float PI = 3.14159265358979323846;

// https://godotengine.org/qa/53831/using-hsv-values-in-shaders-instead-of-rgb
vec4 hsv_to_rgb(float h, float s, float v, float a){
    //based on 
    //https://stackoverflow.com/questions/51203917/math-behind-hsv-to-rgb-conversion-of-colors
    // So it needs values from 0 to 1
    float r;
    float g;
    float b;

    float i = floor(h*6.0);
    float f = h*6.0 -i;
    float p = v*(1.0-s);
    float q = v*(1.0-f*s);
    float t = v* (1.0-(1.0-f)*s);

    int cond = int(i)%6;

    if (cond == 0){
        r = v; g = t; b = p;
    }
    else if (cond == 1){
        r = q; g = v; b = p;
    }
    else if (cond == 2){
        r = p; g = v; b = t;
    }
    else if (cond == 3){
        r = p; g = q; b = v;
    }
    else if (cond == 4){
        r = t; g = p; b = v;
    }
    else if (cond == 5){
        r = v; g = p; b = q;
    }
    else {
        // THIS SHOULD NEVER HAPPEN
        r = 0.0; g = 0.0; b = 0.0;
    }
    return vec4(r,g,b,a);
    return vec4(0.5,1.0,0.0,1.0);
}

void fragment() {
  if (mixing) {
    float s = float(abs(int(TIME * 20f) % 5)) / 4f;
    // vec4 f_color = texture(TEXTURE,UV) * texture(pallet,vec2(s,1)) * vec4(2.5,2.5,2.5,2.5);
    vec4 col_a = texture(TEXTURE, UV) + vec4(0.4, 0.4, 0.4, 0);
    // vec4 col_b = texture(pallet, vec2(s, 1)) * vec4(1.3, 1.3, 1.3, 0);
    vec4 col_b = hsv_to_rgb(TIME * 1f, 1, 1, 1) * vec4(1.3, 1.3, 1.3, 0);
    vec4 f_color;
    if (int(TIME * 20f) % 2 == 0) {
      f_color = col_a * col_b;
    } else {
      f_color = texture(TEXTURE, UV);
    }
    f_color.a = col_a.a;
    COLOR = f_color;
  } else {
    COLOR = texture(TEXTURE, UV);
  }
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/mixing = false

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 10, 13 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 10, 28 )

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 8, 12 )

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 8, 26 )

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 10, 4 )

[sub_resource type="RectangleShape2D" id=6]
extents = Vector2( 8, 2 )

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 8, 2 )

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 1, 6 )

[sub_resource type="RectangleShape2D" id=9]
extents = Vector2( 1, 12 )

[sub_resource type="RectangleShape2D" id=10]
extents = Vector2( 1, 6 )

[sub_resource type="RectangleShape2D" id=11]
extents = Vector2( 1, 12 )

[sub_resource type="Animation" id=16]
resource_name = "Big"
length = 0.24
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.12, 0.24 ),
"transitions": PoolRealArray( 0.5, 2, 2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -12 ), Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=15]
resource_name = "RESET"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=14]
resource_name = "Small"
length = 0.24
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.12, 0.24 ),
"transitions": PoolRealArray( 0.5, 2, 2 ),
"update": 0,
"values": [ Vector2( 0, -16 ), Vector2( 0, -28 ), Vector2( 0, -16 ) ]
}

[node name="Mario" type="KinematicBody2D"]
collision_layer = 2
collision_mask = 2
script = ExtResource( 2 )
powerup_animations = {
0: ExtResource( 1 ),
1: ExtResource( 6 ),
2: ExtResource( 3 ),
3: ExtResource( 7 ),
4: ExtResource( 10 ),
5: ExtResource( 12 ),
6: ExtResource( 14 )
}
powerup_scripts = {
2: ExtResource( 8 ),
3: ExtResource( 9 ),
4: ExtResource( 11 ),
5: ExtResource( 13 ),
6: ExtResource( 15 )
}

[node name="Camera" type="Camera2D" parent="."]
position = Vector2( 0, -15 )
rotating = true
current = true
limit_left = 0
limit_top = 0
limit_right = 11000
limit_bottom = 480
smoothing_speed = 8.0
editor_draw_limits = true

[node name="DebugText" type="Label" parent="."]
margin_left = -24.0
margin_top = -91.0
margin_right = 70.0
margin_bottom = -69.0
rect_scale = Vector2( 0.5, 0.5 )
custom_fonts/font = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Sprite" type="AnimatedSprite" parent="."]
material = SubResource( 13 )
z_index = 10
frames = ExtResource( 1 )
animation = "Stopped"
playing = true
centered = false
offset = Vector2( -14, -31 )

[node name="Collision" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 0, -13 )
shape = SubResource( 1 )

[node name="CollisionBig" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 0, -28 )
shape = SubResource( 2 )

[node name="InsideDetector" type="Area2D" parent="." groups=["Mario"]]
visible = false
collision_layer = 3
collision_mask = 3

[node name="CollisionSmall" type="CollisionShape2D" parent="InsideDetector"]
position = Vector2( 0, -13 )
shape = SubResource( 3 )

[node name="CollisionBig" type="CollisionShape2D" parent="InsideDetector"]
position = Vector2( 0, -28 )
shape = SubResource( 4 )

[node name="BottomDetector" type="Area2D" parent="."]
visible = false
collision_layer = 7
collision_mask = 7

[node name="CollisionBottom" type="CollisionShape2D" parent="BottomDetector"]
scale = Vector2( 1, 0.5 )
shape = SubResource( 5 )

[node name="CollisionBottom2" type="CollisionShape2D" parent="BottomDetector"]
position = Vector2( 0, 2 )
scale = Vector2( 1, 0.5 )
shape = SubResource( 5 )

[node name="TopDetector" type="Area2D" parent="."]
visible = false
collision_layer = 11
collision_mask = 11

[node name="CollisionTop" type="CollisionShape2D" parent="TopDetector"]
position = Vector2( 0, -28 )
shape = SubResource( 6 )

[node name="CollisionTopBig" type="CollisionShape2D" parent="TopDetector"]
position = Vector2( 0, -58 )
shape = SubResource( 7 )

[node name="SmallRightDetector" type="Area2D" parent="."]
visible = false
collision_layer = 3
collision_mask = 3

[node name="CollisionSmallRight" type="CollisionShape2D" parent="SmallRightDetector"]
position = Vector2( 12, -14 )
shape = SubResource( 8 )

[node name="CollisionSmallRightBig" type="CollisionShape2D" parent="SmallRightDetector"]
position = Vector2( 12, -23 )
shape = SubResource( 9 )

[node name="SmallLeftDetector" type="Area2D" parent="."]
visible = false
collision_layer = 3
collision_mask = 3

[node name="CollisionSmallLeft" type="CollisionShape2D" parent="SmallLeftDetector"]
position = Vector2( -12, -14 )
shape = SubResource( 10 )

[node name="CollisionSmallLeftBig" type="CollisionShape2D" parent="SmallLeftDetector"]
position = Vector2( -12, -23 )
shape = SubResource( 11 )

[node name="BaseSounds" parent="." instance=ExtResource( 4 )]

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "RESET"
anims/Big = SubResource( 16 )
anims/RESET = SubResource( 15 )
anims/Small = SubResource( 14 )
